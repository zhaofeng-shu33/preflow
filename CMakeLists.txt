cmake_minimum_required(VERSION 3.5)
if("${CMAKE_PROJECT_NAME}" STREQUAL "" OR "${CMAKE_PROJECT_NAME}" STREQUAL "preflow")
  if(WIN32)
    if(DEFINED ENV{VCPKG_ROOT} AND NOT DEFINED CMAKE_TOOLCHAIN_FILE)
      set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
          CACHE STRING "")
    endif()
    if(DEFINED ENV{VCPKG_DEFAULT_TRIPLET} AND NOT DEFINED VCPKG_TARGET_TRIPLET)
      set(VCPKG_TARGET_TRIPLET "$ENV{VCPKG_DEFAULT_TRIPLET}" CACHE STRING "")
    endif()
  endif()
  project(preflow LANGUAGES CXX)
endif()

set(CMAKE_CXX_STANDARD 14)
option(ENABLE_TESTING "Enable testing" OFF)
option(USE_INTERRUPT "Enable interrupting" ON)
option(USE_BOOST_OPTION "Use Boost Options" ON)
option(OPENMP "use openmp" OFF)
find_package(lemon REQUIRED)
if(OPENMP)
  find_package(OpenMP REQUIRED)
  add_definitions("-DOPENMP=1")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()
if(USE_INTERRUPT)    
    add_subdirectory(InterruptibleThread)
endif()
if(USE_BOOST_OPTION)
    find_package(Boost REQUIRED program_options)
    add_executable(lgf_compute main.cpp)
    target_include_directories(lgf_compute PUBLIC ${Boost_INCLUDE_DIRS})
    target_link_libraries(lgf_compute ${LEMON_LIBRARY})   
    if(WIN32)
        target_link_libraries(lgf_compute debug ${Boost_PROGRAM_OPTIONS_LIBRARY_DEBUG})    
        target_link_libraries(lgf_compute optimized ${Boost_PROGRAM_OPTIONS_LIBRARY_RELEASE})
    else()    
        target_link_libraries(lgf_compute Boost::program_options)
    endif()
endif()

if(ENABLE_TESTING)
    if(USE_BOOST_OPTION)
        add_executable(speed_test speed_test.cpp)
        target_include_directories(speed_test PUBLIC ${Boost_INCLUDE_DIRS})
        target_link_libraries(speed_test ${LEMON_LIBRARY})
  

        if(WIN32)
            target_link_libraries(speed_test debug ${Boost_PROGRAM_OPTIONS_LIBRARY_DEBUG})    
            target_link_libraries(speed_test optimized ${Boost_PROGRAM_OPTIONS_LIBRARY_RELEASE})
        else()    
            target_link_libraries(speed_test Boost::program_options)
        endif()
    endif()
    add_executable(test_mf test.cpp)
    target_link_libraries(test_mf ${LEMON_LIBRARY})
    if(USE_INTERRUPT)
        target_compile_definitions(test_mf PRIVATE -DINTERRUPT)
        target_link_libraries(test_mf InterruptibleThread)
    endif()
    find_package(GTest REQUIRED)
    include_directories(${GTEST_INCLUDE_DIR})
   

    target_link_libraries(test_mf GTest::GTest GTest::Main)
    
    # copy the graph data file to build directory
    configure_file(${CMAKE_CURRENT_SOURCE_DIR}/test.lgf ${PROJECT_BINARY_DIR}/test.lgf COPYONLY)
    if(NOT "${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_CURRENT_SOURCE_DIR}")
        configure_file(${CMAKE_CURRENT_SOURCE_DIR}/test.lgf ${PROJECT_BINARY_DIR}/preflow/test.lgf COPYONLY)
    endif()
    add_test(NAME test_mf COMMAND test_mf)
endif()
